data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<-xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <-z[,"Ozone"]
max(ozone)
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
t.df <- subset(data, Month == 6)
t1 <- t.df[,"Temp"]
mean(t1)
mean(t.df)
mean(t.df[,"Temp"])
mean(subset(data, Month == 6))
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(data, Month == 5)[,"Ozone"])
max(subset(complete.data, Month == 5)[,"Ozone"])
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
# (matches previous results)
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
library(datasets)
data(iris)
?iris
myi <- iris
View(iris)
MPG <- read.csv("~/Downloads/MPG.csv")
View(MPG)
ColMean?
?ColMean
?ColMeans
ColMeans?
ColSums(MPG,Cost)
mean(MPG,"MPG")
x <-MPG
ColSums(X)
ColSums(x)
colMeans(x)
colMeans(x,7)
tail(x)
nrow(x)
mean(x,[,"MPG"])
mean(x[,"MPG"])
mileage <- MPG[,"MPG"]
mean(mileage)
View(x)
?ColMeans
colMeans(x,na.rm = TRUE)
mean?
?mean
mean(mileage, na.rm=TRUE)
cost<-x[,"Cost"]
sum(cost)
PriusMPG <- read.csv("~/Downloads/PriusMPG.csv")
View(PriusMPG)
priusMileage<-PriusMPG[,"MPG"]
mean(priusMileage, na.rm=TRUE)
?split
pCost <- PriusMPG[,"Cost"]
sum(pCost)
sum(pCost, na.rm=TRUE)
?days
92464/6
(92464/6)/12
View(x)
?dates
?date
5757/6
mean(x[,7])
mean(x[,7],na.rm=TRUE)
sum(x[,4])
class(x[,1])
y<-strptime(x[1,1])
y<-as.date(x[1,1])
y<-as.Date(x[1,1])
?strp
?str
summary(x)
str(x)
x[,1]>="12/31/2013"
as.Date(x[,1])>="12/31/2013"
x[1,1]
str(date)
str(as.Date)
summary(PriusMPG)
summary(x)
factor
?factor
colMeans(x[,7])
str(colMeans)
?colMeans
class(x[,7])
x[,7]
colMeans(x[,7],na.rm=TRUE)
x
setwd("~/CourseraHW/RprogrammingAssignment3")
source("best.R")
best(state = "TX", outcome = "heart attack")
best(state = "TX", outcome = "heart failure")
best(state = "MD", outcome = "heart attack")
best(state = "MD", outcome = "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
usstates <- read.csv("states.csv", colClasses = "character")
View(usstates)
valid_statecodes<- usstates[,"StateAbbr"]
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
alldata <- read.csv("outcome-of-care-measures.csv",     # Data import problem resolved
colClasses = "character")           # by coercing to "character"
datacol <- as.numeric(subset(alldata)[,j])                    # extract mortality rate column
namecol <- as.character(subset(alldata)[,"Hospital.Name"])    # extract hospital name column
subDF <- cbind.data.frame(namecol,datacol)
View(subDF)
cleanDF <- na.omit(subDF)
View(alldata)
statecol <- as.character(subset(alldata)[,"State"])             # extract State name
subDF <- cbind.data.frame(namecol,datacol,statecol)
View(subDF)
cleanDF <- na.omit(subDF)
View(cleanDF)
foo <- gl(3,10)
?as.factor
fstates<- usstates[,"StateAbbr"]
fstates<- as.factor(usstates[,"StateAbbr"])
sortedDF <- cleanDF[ order(cleanDF[,2], cleanDF[,1]), ]
View(sortedDF)
View(cleanDF)
s <- split(cleanDF, cleanDF$statecol)
ss <- lapply(s, function(cleanDF) cleanDF[ order(cleanDF[,2], cleanDF[,1]), ]  )
ss
ss$OR
ss$MT
ss$MT[2]
ss$MT[1,1]
ss$MT[3,1]
ss$MT[3,1]
as.character(ss$MT[3,1])
srows <- lapply(s, function(cleanDF) nrow(cleanDF)  )
nRanks <- lapply(s, function(cleanDF) nrow(cleanDF)  )                              # number of rankings in each state
min(nRanks)
min(nRanks[])
min(nRanks[1])
nRanks[1]
?ncol
ncol(nRanks)
outcome <- "heart attack"
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
if (outcome == "heart attack") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("Error in outcome case statement")
}
alldata <- read.csv("outcome-of-care-measures.csv",     # Data import problem resolved
colClasses = "character")           # by coercing to "character"
datacol <- as.numeric(subset(alldata)[,j])                      # extract mortality rate column
namecol <- as.character(subset(alldata)[,"Hospital.Name"])      # extract hospital name column
statecol <- as.character(subset(alldata)[,"State"])             # extract State name
subDF <- cbind.data.frame(namecol,datacol,statecol)
cleanDF <- na.omit(subDF)
splitData <- split(cleanDF, cleanDF$statecol)                   # data split by state
rankings <- lapply(splitData, function(cleanDF)
cleanDF[ order(cleanDF[,2], cleanDF[,1]), ]  )          # rankings by state
nRanked <- lapply(s, function(cleanDF) nrow(cleanDF)            # number of ranked hospitals per state
nRanked
nRanked <- lapply(s, function(cleanDF) nrow(cleanDF))            # number of ranked hospitals per state
nRanked <- lapply(rankings, function(cleanDF) nrow(cleanDF))            # number of ranked hospitals per state
class(nRanked)
str(nRanked)
summary(nRanked)
rankings(1)
rankings[1]
rankings[1,4]
rankings[1,2]
rankings[2,1]
rankings[2]
rankings[2[2]]
rankings[2]$datacol
rankings[50]
rankings[54]
rankings[55]
rankings[50]
rankings[54]
rankings[54]$datacol
rankings[54]$datacol[2]
rankings[54][1,2]
rankings[54](1,2)
rankings[[MT]]
rankings[["MT"]]
usstates <- read.csv("states.csv", colClasses = "character")
x[[usstates[3,3]]]
rankings[[usstates[3,3]]]
usstates[3,3]
View(usstates)
usstates[3,2]
rankings[[usstates[3,2]]]
stateRankings <- rankings[[usstates[3,2]]]
View(stateRankings)
class(stateRankings)
stateRankings[5,1]
stateHospital <- as.character(stateRankings[5,1])
class(stateHospital)
stateCodes <- usstates[,2]
View(alldata)
XstateRankings <- rankings[[stateCodes[3]]]
View(XstateRankings)
View(XstateRankings)
View(XstateRankings)
View(XstateRankings)
View(XstateRankings)
outputDF[,2] <- stateCodes[]
View(cleanDF)
View(stateRankings)
View(XstateRankings)
usstates <- read.csv("states.csv", colClasses = "character")
USstates <- read.csv("states.csv", colClasses = "character")
stateCodes <- USstates[,2]                                      # get state 2-char abbreviations
i <- 3
stateRankings <- rankings[[stateCodes[i]]]
View(stateRankings)
outputDF[,2] <- stateCodes
outputDF <- data.frame(HospitalName=character(),
StateName=character(),
stringsAsFactors=FALSE)
View(outputDF)
outputDF[,2] <- stateCodes
outputDF[,2] <- stateCodes[]
statecodes
stateCodes
outputDF[,2] <- stateCodes()
outputDF[,2] <- stateCodes[[]]
stateCodes[2]
outputDF[i,HospitalName] <- stateHospital
outputDF[i,"HospitalName"] <- stateHospital
View(outputDF)
outputDF <- data.frame(HospitalName=character(),
StateName=character(),
stringsAsFactors=FALSE)
outputDF <- data.frame(HospitalName=character(),
StateName=character(),
stringsAsFactors=FALSE)
View(outputDF)
outputDF[i,"HospitalName"] <- stateHospital
outputDF[i,"StateName"] <- stateCodes[i]
View(outputDF)
i <- 1
stateRankings <- rankings[[stateCodes[i]]]
rank <- 5
stateHospital <- as.character(stateRankings[rank,1])
outputDF[i,"HospitalName"] <- stateHospital
outputDF[i,"StateName"] <- stateCodes[i]
View(outputDF)
outputDF <- data.frame(HospitalName=character(),
StateName=character(),
stringsAsFactors=FALSE)
i <- 1
#stateRankings <- rankings[[USstates[i,2]]]
stateRankings <- rankings[[stateCodes[i]]]
rank <- 5
stateHospital <- as.character(stateRankings[rank,1])
outputDF[i,"HospitalName"] <- stateHospital
outputDF[i,"StateName"] <- stateCodes[i]
View(outputDF)
View(stateRankings)
outputDF <- data.frame(HospitalName=character(),
StateName=character(),
stringsAsFactors=FALSE)
i <- 1
stateRankings <- rankings[[stateCodes[i]]]
rank <- 500
stateHospital <- as.character(stateRankings[rank,1])
outputDF[i,"HospitalName"] <- stateHospital
outputDF[i,"StateName"] <- stateCodes[i]
View(outputDF)
ncol(StateCodes)
dim(StateCodes)
dim(stateCodes)
ncol(stateCodes)
nrow(stateCodes)
size(stateCodes)
length(stateCodes)
class(length(stateCodes))
USstates <- read.csv("states.csv", colClasses = "character")
stateCodes <- USstates[,2]                                      # get state 2-char abbreviations
nStates <- length(stateCodes)
outcome <- "heart attack"
num <- 4
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# set j to the correct column in the input data table
if (outcome == "heart attack") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("Error in outcome case statement")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# set j to the correct column in the input data table
if (outcome == "heart attack") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("Error in outcome case statement")
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("Error in outcome case statement")
}
## Read outcome data
##
alldata <- read.csv("outcome-of-care-measures.csv",     # Data import problem resolved
colClasses = "character")           # by coercing to "character"
# Condense data to just hospital, mortality rate and state
outcome <- "heart attack"
num <- 4
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# set j to the correct column in the input data table
if (outcome == "heart attack") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("Error in outcome case statement")
}
## Read outcome data
##
alldata <- read.csv("outcome-of-care-measures.csv",     # Data import problem resolved
colClasses = "character")           # by coercing to "character"
# Condense data to just hospital, mortality rate and state
datacol <- as.numeric(subset(alldata)[,j])                      # extract mortality rate column
namecol <- as.character(subset(alldata)[,"Hospital.Name"])      # extract hospital name column
statecol <- as.character(subset(alldata)[,"State"])             # extract State name
# !!! Must use this CBIND.DATA.FRAME to add columns of numeric and character columns!!!
subDF <- cbind.data.frame(namecol,datacol,statecol)
# remove NA rows
cleanDF <- na.omit(subDF)
# Split data by state and then
# Apply sort (mortality rate, hospital name) to split
#
splitData <- split(cleanDF, cleanDF$statecol)                   # data split by state
rankings <- lapply(splitData, function(cleanDF)
cleanDF[ order(cleanDF[,2], cleanDF[,1]), ]  )          # rankings by state
nRanked <- lapply(rankings, function(cleanDF) nrow(cleanDF))    # number of ranked hospitals per state
# Read in US States table and coerce State codes
USstates <- read.csv("states.csv", colClasses = "character")
stateCodes <- USstates[,2]                                      # get state 2-char abbreviations
nStates <- length(stateCodes)                                   # number of states (54 w/ DC, GU, PR, VI)
# iterate through US states and find corresponding hospital for the given ranking
rank <- 5
outputDF <- data.frame(HospitalName=character(),                # create dataframe for output
StateName=character(),
stringsAsFactors=FALSE)
for i 1:nStates {
for (i in 1:nStates) {
stateRankings <- rankings[[stateCodes[i]]]
stateHospital <- as.character(stateRankings[rank,1])
outputDF[i,"HospitalName"] <- stateHospital
outputDF[i,"StateName"] <- stateCodes[i]
}
View(outputDF)
rank <- 1
outputDF <- data.frame(HospitalName=character(),                # create dataframe for output
StateName=character(),
stringsAsFactors=FALSE)
for (i in 1:nStates) {
stateRankings <- rankings[[stateCodes[i]]]
stateHospital <- as.character(stateRankings[rank,1])
outputDF[i,"HospitalName"] <- stateHospital
outputDF[i,"StateName"] <- stateCodes[i]
}
View(outputDF)
View(stateRankings)
View(cleanDF)
View(cleanDF)
rankings
