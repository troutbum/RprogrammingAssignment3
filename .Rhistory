pwd
wd
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
getwd()
data<-hw1_data
dim(data)
good_data<- complete.cases(data)
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
data<-hw1_data
View(data)
good <- complete.cases(data)
good
good_data<-data[good,][,]
View(good_data)
data_above31 <- good_data[,"Ozone" > 31][,]
View(data_above31)
data_above31 <- good_data["Ozone" > 31]
data_above31 <- good_data("Ozone" > 31)
data_above31 <- good_data[,"Ozone" > 31]
data_above31
data_above31 <- good_data[:,"Ozone" > 31]
data_above31 <- good_data[good_data$Ozone > 31]
data_above31 <- good_data[Ozone > 31]
data_above31 <- good_data[$Ozone > 31]
data_above31 <- subset(good_data, "Ozone" > 31]
data_above31 <- subset(good_data, "Ozone" > 31)
View(data_above31)
data_above31 <- subset(good_data, [,"Ozone" > 31])
data_above31 <- good_data[which("Ozone" > 31,])
data_above31 <- good_data[which("Ozone" > 31,]
data_above31 <- good_data[which("Ozone" > 31),]
data_above31 <- good_data[which("Ozone" > 31)]
data_above31 <- good_data[which(,"Ozone" > 31)]
data_above31 <- good_data[which(:,"Ozone" > 31)]
names(good_data)
data.above31 <- subset(good_data, Ozone > 31)
View(data.above31)
foo <- complete.cases(data)
good <- complete.cases(data) #logical vector to weed out NAs
# R Programming - April 2014
# Week 1 Quiz
# code for Question 18
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
View(complete.data)
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
View(complete.data)
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
View(ozone.above31.data)
temp.above90.data <- subset(ozone.above31.data, Temp > 90)
View(temp.above90.data)
View(temp.above90.data)
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
View(`o31andt90.data`)
View(temp.above90.data)
View(`o31andt90.data`)
mean(o31andt90.data[Solar.R])
mean(o31andt90.data(:,Solar.R))
mean(o31andt90.data[:,Solar.R])
mean(o31andt90.data[:,"Solar.R]")
mean(o31andt90.data("Solar.R))
mean(o31andt90.data("Solar.R"))
colMeans(o31andt90.data[:,"Solar.R"])
mean(o31andt90.data[:,Solar.R])
mean(o31andt90.data[:,3])
colMeans(o31andt90.data[:,3])
colMeans(o31andt90.data[:,3])
solar.data <- o31andt90.data[:,3]
solar.data <- o31andt90.data(:,3)
solar.data <- o31andt90.data(,3)
o31andt90
o31andt90.data
o31andt90.data(,3)
o31andt90.data(:,3)
o31andt90.data[:,3]
class(031andt90.data)
class(o31andt90.data)
subdata <- o31andt90.data
class(subdata)
mean(subdata)
xdata <- data.matrix(o31andt90.data)
View(xdata)
View(xdata)
mean(xdata)
mean(xdata(,3))
mean(xdata[,3])
mean(xdata[:,3])
xdata
mean(xdata,"Solar.R")
mean(xdata,Solar.R)
View(`o31andt90.data`)
solar<-xdata(,3)
solar<-xdata[,3]
solar<-xdata[,2]
mean(solar)
foo<-xdata[,"Solar.R"]
mean(foo)
y.df <- subset(complete.data, Month == 6)
View(y.df)
View(complete.data)
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean_temp <- mean(temp)
mean_temp
y.df <- subset(data, Month == 6)
View(y.df)
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean(temp)
View(data)
View(complete.data)
z.df <- subset(complete.data, Month ==5)
z <- data.matrix(z.df) #convert to matrix
ozone <-z[,"Ozone"]
max(ozone)
View(z.df)
View(z.df)
z2.df <- subset(data, Month ==5)
z2 <- data.matrix(z2.df) #convert to matrix
ozone2 <-z2[,"Ozone"]
max(ozone2)
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<-xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <-z[,"Ozone"]
max(ozone)
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
t.df <- subset(data, Month == 6)
t1 <- t.df[,"Temp"]
mean(t1)
mean(t.df)
mean(t.df[,"Temp"])
mean(subset(data, Month == 6))
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(data, Month == 5)[,"Ozone"])
max(subset(complete.data, Month == 5)[,"Ozone"])
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
# (matches previous results)
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
library(datasets)
data(iris)
?iris
myi <- iris
View(iris)
MPG <- read.csv("~/Downloads/MPG.csv")
View(MPG)
ColMean?
?ColMean
?ColMeans
ColMeans?
ColSums(MPG,Cost)
mean(MPG,"MPG")
x <-MPG
ColSums(X)
ColSums(x)
colMeans(x)
colMeans(x,7)
tail(x)
nrow(x)
mean(x,[,"MPG"])
mean(x[,"MPG"])
mileage <- MPG[,"MPG"]
mean(mileage)
View(x)
?ColMeans
colMeans(x,na.rm = TRUE)
mean?
?mean
mean(mileage, na.rm=TRUE)
cost<-x[,"Cost"]
sum(cost)
PriusMPG <- read.csv("~/Downloads/PriusMPG.csv")
View(PriusMPG)
priusMileage<-PriusMPG[,"MPG"]
mean(priusMileage, na.rm=TRUE)
?split
pCost <- PriusMPG[,"Cost"]
sum(pCost)
sum(pCost, na.rm=TRUE)
?days
92464/6
(92464/6)/12
View(x)
?dates
?date
5757/6
mean(x[,7])
mean(x[,7],na.rm=TRUE)
sum(x[,4])
class(x[,1])
y<-strptime(x[1,1])
y<-as.date(x[1,1])
y<-as.Date(x[1,1])
?strp
?str
summary(x)
str(x)
x[,1]>="12/31/2013"
as.Date(x[,1])>="12/31/2013"
x[1,1]
str(date)
str(as.Date)
summary(PriusMPG)
summary(x)
factor
?factor
colMeans(x[,7])
str(colMeans)
?colMeans
class(x[,7])
x[,7]
colMeans(x[,7],na.rm=TRUE)
x
setwd("~/CourseraHW/RprogrammingAssignment3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
head(outcome)
ncols(outcome)
ncol(outcome)
hist(outcome[,11])
class(x)
class(outcome[,11])
outcome[,11] <- as.numeric(outcome[,11])   # convert from character to numeric type
hist(outcome[,11])
mean(outcome[,11])
mean(outcome[,11],na.rm=TRUE)
PriusData <- read.csv("~/Downloads/PriusData.csv")
View(PriusData)
str(PriusData)
hist(PriusData[,"MPG"])
CLAdata <- read.csv("~/Downloads/CLAdata.csv")
View(CLAdata)
hist(CLAdata,"MPG")
hist(CLAdata[,"MPG"])
PriusData <- read.csv("~/Downloads/PriusData.csv")
View(PriusData)
hist(PriusData[,"MPG"])
setwd("~/CourseraHW/RprogrammingAssignment3")
outcome.of.care.measures <- read.csv("~/CourseraHW/RprogrammingAssignment3/outcome-of-care-measures.csv", header=F)
View(outcome.of.care.measures)
# Plot the 30-day mortality rates for heart attack Read the outcome data into R
# via the read.csv function and look at the first few rows.
# There are many columns in this dataset. You can see how many by
# typing ncol(outcome) (you can see the number of rows with the nrow function).
#
# In addition, you can see the names of each column by typing names(outcome)
# (the names are also in the PDF document. To make a simple histogram of the
# # 30-day death rates from heart attack (column 11 in the outcome dataset)
#
# Because we originally read the data in as character (by specifying colClasses
# = "character" we need to coerce the column to be numeric. You may get a
# warning about NAs being introduced but that is okay.
Because we originally read the data in as character (by specifying colClasses = "character" we need to coerce the column to be numeric. You may get a warning about NAs being introduced but that is okay.
setwd("~/CourseraHW/RprogrammingAssignment3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")  # coerce to character?
head(outcome)
ncol(outcome)
class(outcome[,11])
outcome[,11] <- as.numeric(outcome[,11])   # convert from character to numeric type
hist(outcome[,11])
mean(outcome[,11],na.rm=TRUE)
load("~/CourseraHW/ProgrammingAssignment2/cachematrix.R")
outcome <- read.csv("outcome-of-care-measures.csv")  # read outcome data
View(outcome)
state_abbreviations <- read.csv("~/CourseraHW/RprogrammingAssignment3/state_abbreviations.txt")
View(state_abbreviations)
data <- read.csv("outcome-of-care-measures.csv")  # read outcome data
outcome <- "heart attack"        if (outcome == "heart attack" or "heart failure" or "pneumonia") {                print("OK")        }
outcome <- "heart attack"
if (outcome == "heart attack" or "heart failure" or "pneumonia") {                print("OK")        }
if (outcome == "heart attack" | "heart failure" | "pneumonia") {
if (outcome == "heart attack" | "heart failure" | "pneumonia") {                print("OK")        }
if (outcome == "heart attack") {                 print("OK")        }
str(outcome)
outcome == "heart attack"
print("OK")
if (outcome == "heart attack") {                 print("OK")        }
if (outcome == "heart attack") print("OK")
if (outcome == "heart attack" | "heart failure" | "pneumonia") print("OK")
v <- c("heart attack", "heart failure", "pneumonia")
outcome %in% v
outcome %out% valid_outcomes
?%in%
if (!(outcome %in% valid_outcomes)) print("not valid")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) print("not valid")
outcome <- "foo"
if (!(outcome %in% valid_outcomes)) print("not valid")
if (!(outcome %in% valid_outcomes)) {                print("not valid")        }
print("not valid")
%in% valid_outcomes))                print("not vali
if (!(outcome %in% valid_outcomes))                print("not valid")
if (!(outcome %in% valid_outcomes)) {                }
if (!(outcome %in% valid_outcomes))
print("not valid")
if (!(outcome %in% valid_outcomes)) print("not valid")
states <- read.csv("~/CourseraHW/RprogrammingAssignment3/states.csv")
View(states)
valid_states <- states[,"StateAbbr"]
states <- read.csv("states.csv", colClasses = "character")
valid_states <- states[,"StateAbbr"]
state <- HI                states <- read.csv("states.csv", colClasses = "character")        valid_statecodes<- states[,"StateAbbr"]        if (!(state %in% valid_outcomes)) print("not valid")
state <- "HI"                states <- read.csv("states.csv", colClasses = "character")        valid_statecodes<- states[,"StateAbbr"]        if (!(state %in% valid_outcomes)) print("not valid")
state <- "HI"
states <- read.csv("states.csv", colClasses = "character")
valid_statecodes<- states[,"StateAbbr"]
if (!(state %in% valid_outcomes)) print("not valid")
if (!(state %in% valid_statecodes)) print("not valid")
state <- "PI"                states <- read.csv("states.csv", colClasses = "character")        valid_statecodes<- states[,"StateAbbr"]        if (!(state %in% valid_statecodes)) print("not valid")
state <- "PI"
states <- read.csv("states.csv", colClasses = "character")
valid_statecodes<- states[,"StateAbbr"]
if (!(state %in% valid_statecodes)) print("not valid")
outcome <- "heart attack
outcome <- "heart attack"
# test to see if outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
print("not valid")
}
outcome <- "hearts attack"
# test to see if outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
print("not valid")
}
outcome <- "hearts attack"
# test to see if outcome is valid
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
return("outcome not valid")
}
