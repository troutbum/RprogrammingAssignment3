pwd
wd
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
getwd()
data<-hw1_data
dim(data)
good_data<- complete.cases(data)
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
View(hw1_data)
data<-hw1_data
View(data)
good <- complete.cases(data)
good
good_data<-data[good,][,]
View(good_data)
data_above31 <- good_data[,"Ozone" > 31][,]
View(data_above31)
data_above31 <- good_data["Ozone" > 31]
data_above31 <- good_data("Ozone" > 31)
data_above31 <- good_data[,"Ozone" > 31]
data_above31
data_above31 <- good_data[:,"Ozone" > 31]
data_above31 <- good_data[good_data$Ozone > 31]
data_above31 <- good_data[Ozone > 31]
data_above31 <- good_data[$Ozone > 31]
data_above31 <- subset(good_data, "Ozone" > 31]
data_above31 <- subset(good_data, "Ozone" > 31)
View(data_above31)
data_above31 <- subset(good_data, [,"Ozone" > 31])
data_above31 <- good_data[which("Ozone" > 31,])
data_above31 <- good_data[which("Ozone" > 31,]
data_above31 <- good_data[which("Ozone" > 31),]
data_above31 <- good_data[which("Ozone" > 31)]
data_above31 <- good_data[which(,"Ozone" > 31)]
data_above31 <- good_data[which(:,"Ozone" > 31)]
names(good_data)
data.above31 <- subset(good_data, Ozone > 31)
View(data.above31)
foo <- complete.cases(data)
good <- complete.cases(data) #logical vector to weed out NAs
# R Programming - April 2014
# Week 1 Quiz
# code for Question 18
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
View(complete.data)
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
View(complete.data)
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
View(ozone.above31.data)
temp.above90.data <- subset(ozone.above31.data, Temp > 90)
View(temp.above90.data)
View(temp.above90.data)
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
View(`o31andt90.data`)
View(temp.above90.data)
View(`o31andt90.data`)
mean(o31andt90.data[Solar.R])
mean(o31andt90.data(:,Solar.R))
mean(o31andt90.data[:,Solar.R])
mean(o31andt90.data[:,"Solar.R]")
mean(o31andt90.data("Solar.R))
mean(o31andt90.data("Solar.R"))
colMeans(o31andt90.data[:,"Solar.R"])
mean(o31andt90.data[:,Solar.R])
mean(o31andt90.data[:,3])
colMeans(o31andt90.data[:,3])
colMeans(o31andt90.data[:,3])
solar.data <- o31andt90.data[:,3]
solar.data <- o31andt90.data(:,3)
solar.data <- o31andt90.data(,3)
o31andt90
o31andt90.data
o31andt90.data(,3)
o31andt90.data(:,3)
o31andt90.data[:,3]
class(031andt90.data)
class(o31andt90.data)
subdata <- o31andt90.data
class(subdata)
mean(subdata)
xdata <- data.matrix(o31andt90.data)
View(xdata)
View(xdata)
mean(xdata)
mean(xdata(,3))
mean(xdata[,3])
mean(xdata[:,3])
xdata
mean(xdata,"Solar.R")
mean(xdata,Solar.R)
View(`o31andt90.data`)
solar<-xdata(,3)
solar<-xdata[,3]
solar<-xdata[,2]
mean(solar)
foo<-xdata[,"Solar.R"]
mean(foo)
y.df <- subset(complete.data, Month == 6)
View(y.df)
View(complete.data)
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean_temp <- mean(temp)
mean_temp
y.df <- subset(data, Month == 6)
View(y.df)
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean(temp)
View(data)
View(complete.data)
z.df <- subset(complete.data, Month ==5)
z <- data.matrix(z.df) #convert to matrix
ozone <-z[,"Ozone"]
max(ozone)
View(z.df)
View(z.df)
z2.df <- subset(data, Month ==5)
z2 <- data.matrix(z2.df) #convert to matrix
ozone2 <-z2[,"Ozone"]
max(ozone2)
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<-xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <-z[,"Ozone"]
max(ozone)
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
t.df <- subset(data, Month == 6)
t1 <- t.df[,"Temp"]
mean(t1)
mean(t.df)
mean(t.df[,"Temp"])
mean(subset(data, Month == 6))
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(data, Month == 5)[,"Ozone"])
max(subset(complete.data, Month == 5)[,"Ozone"])
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
# (matches previous results)
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
library(datasets)
data(iris)
?iris
myi <- iris
View(iris)
MPG <- read.csv("~/Downloads/MPG.csv")
View(MPG)
ColMean?
?ColMean
?ColMeans
ColMeans?
ColSums(MPG,Cost)
mean(MPG,"MPG")
x <-MPG
ColSums(X)
ColSums(x)
colMeans(x)
colMeans(x,7)
tail(x)
nrow(x)
mean(x,[,"MPG"])
mean(x[,"MPG"])
mileage <- MPG[,"MPG"]
mean(mileage)
View(x)
?ColMeans
colMeans(x,na.rm = TRUE)
mean?
?mean
mean(mileage, na.rm=TRUE)
cost<-x[,"Cost"]
sum(cost)
PriusMPG <- read.csv("~/Downloads/PriusMPG.csv")
View(PriusMPG)
priusMileage<-PriusMPG[,"MPG"]
mean(priusMileage, na.rm=TRUE)
?split
pCost <- PriusMPG[,"Cost"]
sum(pCost)
sum(pCost, na.rm=TRUE)
?days
92464/6
(92464/6)/12
View(x)
?dates
?date
5757/6
mean(x[,7])
mean(x[,7],na.rm=TRUE)
sum(x[,4])
class(x[,1])
y<-strptime(x[1,1])
y<-as.date(x[1,1])
y<-as.Date(x[1,1])
?strp
?str
summary(x)
str(x)
x[,1]>="12/31/2013"
as.Date(x[,1])>="12/31/2013"
x[1,1]
str(date)
str(as.Date)
summary(PriusMPG)
summary(x)
factor
?factor
colMeans(x[,7])
str(colMeans)
?colMeans
class(x[,7])
x[,7]
colMeans(x[,7],na.rm=TRUE)
x
setwd("~/CourseraHW/RprogrammingAssignment3")
outcome <- "heart failure"
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!(outcome %in% valid_outcomes)) {
stop("invalid outcome")
}
# set j to the correct column in the input data table
if (outcome == "heart attack") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if (outcome == "heart failure") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if (outcome == "pneumonia") {
j <- "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
} else {
stop("Error in outcome case statement")
}
## Read outcome data
##
alldata <- read.csv("outcome-of-care-measures.csv",     # Data import problem resolved
colClasses = "character")           # by coercing to "character"
# Condense data to just hospital, mortality rate and state
datacol <- suppressWarnings(as.numeric(subset(alldata)[,j]))    # extract mortality rate column non-numeric
# data  (e.g. 'Not Available') coerced to NAs
namecol <- as.character(subset(alldata)[,"Hospital.Name"])      # extract hospital name column
statecol <- as.character(subset(alldata)[,"State"])             # extract State name
# !!! Must use this CBIND.DATA.FRAME to add columns of numeric and character columns!!!
subDF <- cbind.data.frame(namecol,datacol,statecol)
# remove NA rows
cleanDF <- na.omit(subDF)
# Split data by state and then
# Apply sort (mortality rate, hospital name) to split
#
splitData <- split(cleanDF, cleanDF$statecol)                   # data split by state
rankings <- lapply(splitData, function(cleanDF)
cleanDF[ order(cleanDF[,2], cleanDF[,1]), ]  )          # complete set of rankings by state
nRanked <- lapply(rankings, function(cleanDF) nrow(cleanDF))    # number of ranked hospitals per state
# Read in US States table and coerce State codes
USstates <- read.csv("states.csv", colClasses = "character")
stateCodes <- USstates[,2]                                      # get state 2-char abbreviations
nStates <- length(stateCodes)                                   # number of states (54 w/ DC, GU, PR, VI)
# iterate through US states and find corresponding hospital for the given ranking
rank <- 1
outputDF <- data.frame(HospitalName=character(),                # create dataframe for output
StateName=character(),
stringsAsFactors=FALSE)
for (i in 1:nStates) {                                          # iterate through each state
stateRankings <- rankings[[stateCodes[i]]]              # to make ranked list of hospitals
stateHospital <- as.character(stateRankings[rank,1])    # pick hospital based on input NUM
outputDF[i,"HospitalName"] <- stateHospital             # stuff results into data.frame
outputDF[i,"StateName"] <- stateCodes[i]
}
View(outputDF)
nStates[1]
nRanked[1]
nRanked[2]
class(nRanked[2])
x <- as.numeric(nRanked[2])
x
class(x)
source("rankall.R")
head(rankall("heart attack", 20), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
# Write a function called rankall() that takes two arguments: an outcome name
rankall("heart failure", "best")
source("rankall.R")
rankall("heart failure", "best")
rankall("pneumonia", "worst")
rankall("heart attack", "best")
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
num
source("rankall.R")
debug(rankall)
tail(rankall("heart failure"), 10)
# iterate through US states and find corresponding hospital for the given ranking
outputDF <- data.frame(HospitalName=character(),                # create dataframe for output
StateName=character(),
stringsAsFactors=FALSE)
# Iterate through all states
for (i in 1:nStates) {
# Set rank based upon NUM input
# If NUM == a character vector
if (is.character(num)) {
if (num == "best") {
rank <- 1                               # Best hospital in rankings
}
if (num == "worst") {                           # Last hospital in rankings
rank <- as.numeric(nRanked[i])
}
else {
return("invalid input characters in num argument")
}
}
# If NUM == a numeric vector
if (is.numeric(num)) {
rank <- as.integer(num)
